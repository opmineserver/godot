<?xml version="1.0" encoding="UTF-8" ?>
<class name="Node" inherits="Object" category="Core" version="3.0.2">
	<brief_description>
		Base class for all [i]scene[/i] objects.
	</brief_description>
	<description>
		Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.
		A tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects. Nodes can also optionally be added to groups. This makes it possible to access a number of nodes from code (an "enemies" group, for example) to perform grouped actions.
		[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.
		Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes.
		This means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree).
		[b]Processing:[/b] Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.
		Nodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.
		To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.
		Finally, when a node is freed with [method free] or [method queue_free], it will also free all its children.
		[b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections), with behaviour varying depending on the network mode ([method set_network_mode]) of the receiving peer. To identify which node receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers).
	</description>
	<tutorials>
		http://docs.godotengine.org/en/3.0/getting_started/step_by_step/scenes_and_nodes.html
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="_enter_tree" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
				Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.
				Corresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].
			</description>
		</method>
		<method name="_exit_tree" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
				Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.
				Corresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited]
			</description>
		</method>
		<method name="_input" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="event" type="InputEvent">
			</argument>
			<description>
				Called when there is an input event. The input event propagates through the node tree until a node consumes it.
				It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input].
			</description>
		</method>
		<method name="_physics_process" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="delta" type="float">
			</argument>
			<description>
				Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant.
				It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process].
				Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in [method Object._notification].
			</description>
		</method>
		<method name="_process" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="delta" type="float">
			</argument>
			<description>
				Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant.
				It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process].
				Corresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].
			</description>
		</method>
		<method name="_ready" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
				Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards.
				Corresponds to the NOTIFICATION_READY notification in [method Object._notification].
			</description>
		</method>
		<method name="_unhandled_input" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="event" type="InputEvent">
			</argument>
			<description>
				Propagated to all nodes when the previous InputEvent is not consumed by any nodes.
				It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input].
			</description>
		</method>
		<method name="_unhandled_key_input" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="event" type="InputEventKey">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_child">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="legible_unique_name" type="bool" default="false">
			</argument>
			<description>
				Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.
				Setting "legible_unique_name" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.
			</description>
		</method>
		<method name="add_child_below_node">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="child_node" type="Node">
			</argument>
			<argument index="2" name="legible_unique_name" type="bool" default="false">
			</argument>
			<description>
				Adds a child node. The child is placed below the given node in the list of children.
				Setting "legible_unique_name" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.
			</description>
		</method>
		<method name="add_to_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="persistent" type="bool" default="false">
			</argument>
			<description>
				Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [method is_inside_tree]).
			</description>
		</method>
		<method name="can_process" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the node can process while the scene tree is paused (see [method set_pause_mode]). Always returns [code]true[/code] if the scene tree is not paused, and [code]false[/code] if the node is not in the tree. FIXME: Why FAIL_COND?
			</description>
		</method>
		<method name="duplicate" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="flags" type="int" default="15">
			</argument>
			<description>
				Duplicates the node, returning a new node.
				You can fine-tune the behavior using the [code]flags[/code]. See DUPLICATE_* constants.
			</description>
		</method>
		<method name="find_node" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="mask" type="String">
			</argument>
			<argument index="1" name="recursive" type="bool" default="true">
			</argument>
			<argument index="2" name="owned" type="bool" default="true">
			</argument>
			<description>
				Finds a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.
			</description>
		</method>
		<method name="get_child" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Returns a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.
			</description>
		</method>
		<method name="get_child_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the number of child nodes.
			</description>
		</method>
		<method name="get_children" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns an array of references to node's children.
			</description>
		</method>
		<method name="get_groups" qualifiers="const">
			<return type="Array">
			</return>
			<description>
				Returns an array listing the groups that the node is a member of.
			</description>
		</method>
		<method name="get_index" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the node's index, i.e. its position among the siblings of its parent.
			</description>
		</method>
		<method name="get_network_master" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the peer ID of the network master for this node.
			</description>
		</method>
		<method name="get_node" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
				Fetches a node. The [NodePath] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a [code]null instance[/code] is returned and attempts to access it will result in an "Attempt to call &lt;method&gt; on a null instance." error.
				Note: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).
				[i]Example:[/i] Assume your current node is Character and the following tree:
				[codeblock]
				/root
				/root/Character
				/root/Character/Sword
				/root/Character/Backpack/Dagger
				/root/MyGame
				/root/Swamp/Alligator
				/root/Swamp/Mosquito
				/root/Swamp/Goblin
				[/codeblock]
				Possible paths are:
				[codeblock]
				get_node("Sword")
				get_node("Backpack/Dagger")
				get_node("../Swamp/Alligator")
				get_node("/root/MyGame")
				[/codeblock]
			</description>
		</method>
		<method name="get_node_and_resource">
			<return type="Array">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parent" qualifiers="const">
			<return type="Node">
			</return>
			<description>
				Returns the parent node of the current node, or an empty [code]Node[/code] if the node lacks a parent.
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
				Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).
			</description>
		</method>
		<method name="get_path_to" qualifiers="const">
			<return type="NodePath">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Returns the relative path from the current node to the specified node in "node" argument. Both nodes must be in the same scene, or the function will fail.
			</description>
		</method>
		<method name="get_physics_process_delta_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the time elapsed since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed in [OS].
			</description>
		</method>
		<method name="get_position_in_parent" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns the node's order in the scene tree branch. For example, if called on the first child node the position is [code]0[/code].
			</description>
		</method>
		<method name="get_process_delta_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
				Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.
			</description>
		</method>
		<method name="get_scene_instance_load_placeholder" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_tree" qualifiers="const">
			<return type="SceneTree">
			</return>
			<description>
				Returns the [SceneTree] that contains this node.
			</description>
		</method>
		<method name="get_viewport" qualifiers="const">
			<return type="Viewport">
			</return>
			<description>
				Returns the node's [Viewport].
			</description>
		</method>
		<method name="has_node" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
				Returns [code]true[/code] if the node that the [NodePath] points to exists.
			</description>
		</method>
		<method name="has_node_and_resource" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_a_parent_of" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Returns [code]true[/code] if the given node is a direct or indirect child of the current node.
			</description>
		</method>
		<method name="is_displayed_folded" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the node is folded (collapsed) in the Scene dock.
			</description>
		</method>
		<method name="is_greater_than" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Returns [code]true[/code] if the given node occurs later in the scene hierarchy than the current node.
			</description>
		</method>
		<method name="is_in_group" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
				Returns [code]true[/code] if this node is in the specified group.
			</description>
		</method>
		<method name="is_inside_tree" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if this node is currently inside a [SceneTree].
			</description>
		</method>
		<method name="is_network_master" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_physics_processing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if physics processing is enabled (see [method set_physics_process]).
			</description>
		</method>
		<method name="is_physics_processing_internal" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if processing is enabled (see [method set_process]).
			</description>
		</method>
		<method name="is_processing_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the node is processing input (see [method set_process_input]).
			</description>
		</method>
		<method name="is_processing_internal" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing_unhandled_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the node is processing unhandled input (see [method set_process_unhandled_input]).
			</description>
		</method>
		<method name="is_processing_unhandled_key_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the node is processing unhandled key input (see [method set_process_unhandled_key_input]).
			</description>
		</method>
		<method name="move_child">
			<return type="void">
			</return>
			<argument index="0" name="child_node" type="Node">
			</argument>
			<argument index="1" name="to_position" type="int">
			</argument>
			<description>
				Moves a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.
			</description>
		</method>
		<method name="print_stray_nodes">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="print_tree">
			<return type="void">
			</return>
			<description>
				Prints the scene to stdout. Used mainly for debugging purposes.
			</description>
		</method>
		<method name="propagate_call">
			<return type="void">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="args" type="Array" default="[  ]">
			</argument>
			<argument index="2" name="parent_first" type="bool" default="false">
			</argument>
			<description>
				Calls the given method (if present) with the arguments given in [code]args[/code] on this node and recursively on all its children. If the parent_first argument is [code]true[/code] then the method will be called on the current node first, then on all children. If it is [code]false[/code] then the children will be called first.
			</description>
		</method>
		<method name="propagate_notification">
			<return type="void">
			</return>
			<argument index="0" name="what" type="int">
			</argument>
			<description>
				Notifies the current node and all its children recursively by calling notification() on all of them.
			</description>
		</method>
		<method name="queue_free">
			<return type="void">
			</return>
			<description>
				Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to check whether a node will be deleted at the end of the frame.
			</description>
		</method>
		<method name="raise">
			<return type="void">
			</return>
			<description>
				Moves this node to the top of the array of nodes of the parent node. This is often useful in GUIs ([Control] nodes), because their order of drawing depends on their order in the tree.
			</description>
		</method>
		<method name="remove_and_skip">
			<return type="void">
			</return>
			<description>
				Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.
			</description>
		</method>
		<method name="remove_child">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
				Removes a child node. The node is NOT deleted and must be deleted manually.
			</description>
		</method>
		<method name="remove_from_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
				Removes a node from a group.
			</description>
		</method>
		<method name="replace_by">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="keep_data" type="bool" default="false">
			</argument>
			<description>
				Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.
			</description>
		</method>
		<method name="request_ready">
			<return type="void">
			</return>
			<description>
				Requests that [code]_ready[/code] be called again.
			</description>
		</method>
		<method name="rpc" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<description>
				Sends a remote procedure call request to all peers on the network (and locally), optionally sending additional data as arguments. Call request will be received by nodes with the same [NodePath].
			</description>
		</method>
		<method name="rpc_config">
			<return type="void">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="mode" type="int" enum="Node.RPCMode">
			</argument>
			<description>
				Changes the method's RPC mode (one of RPC_MODE_* constants).
			</description>
		</method>
		<method name="rpc_id" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
				Sends a [method rpc] to a specific peer identified by [i]peer_id[/i].
			</description>
		</method>
		<method name="rpc_unreliable" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<description>
				Sends a [method rpc] using an unreliable protocol.
			</description>
		</method>
		<method name="rpc_unreliable_id" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
				Sends a [method rpc] to a specific peer identified by [i]peer_id[/i] using an unreliable protocol.
			</description>
		</method>
		<method name="rset">
			<return type="void">
			</return>
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="value" type="Variant">
			</argument>
			<description>
				Remotely changes property's value on other peers (and locally).
			</description>
		</method>
		<method name="rset_config">
			<return type="void">
			</return>
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="mode" type="int" enum="Node.RPCMode">
			</argument>
			<description>
				Changes the property's RPC mode (one of RPC_MODE_* constants).
			</description>
		</method>
		<method name="rset_id">
			<return type="void">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
				Remotely changes property's value on a specific peer identified by [i]peer_id[/i].
			</description>
		</method>
		<method name="rset_unreliable">
			<return type="void">
			</return>
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="value" type="Variant">
			</argument>
			<description>
				Remotely changes property's value on other peers (and locally) using an unreliable protocol.
			</description>
		</method>
		<method name="rset_unreliable_id">
			<return type="void">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
				Remotely changes property's value on a specific peer identified by [i]peer_id[/i] using an unreliable protocol.
			</description>
		</method>
		<method name="set_display_folded">
			<return type="void">
			</return>
			<argument index="0" name="fold" type="bool">
			</argument>
			<description>
				Sets the folded state of the node in the Scene dock.
			</description>
		</method>
		<method name="set_network_master">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="recursive" type="bool" default="true">
			</argument>
			<description>
				Sets the node network master to the peer with the given peer ID. The network master is the peer that has authority over it on the network. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server).
			</description>
		</method>
		<method name="set_physics_process">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, see [OS] to change) interval (and the [method _physics_process] callback will be called if exists). Enabled automatically if [method _physics_process] is overridden. Any calls to this before [method _ready] will be ignored.
			</description>
		</method>
		<method name="set_physics_process_internal">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Enables or disables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). Enabled automatically if [method _process] is overridden. Any calls to this before [method _ready] will be ignored.
			</description>
		</method>
		<method name="set_process_input">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [method _input] is overridden. Any calls to this before [method _ready] will be ignored.
			</description>
		</method>
		<method name="set_process_internal">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process_unhandled_input">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [Control]). Enabled automatically if [method _unhandled_input] is overridden. Any calls to this before [method _ready] will be ignored.
			</description>
		</method>
		<method name="set_process_unhandled_key_input">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
				Enables unhandled key input processing. Enabled automatically if [method _unhandled_key_input] is overridden. Any calls to this before [method _ready] will be ignored.
			</description>
		</method>
		<method name="set_scene_instance_load_placeholder">
			<return type="void">
			</return>
			<argument index="0" name="load_placeholder" type="bool">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="filename" type="String" setter="set_filename" getter="get_filename">
			When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.
		</member>
		<member name="name" type="String" setter="set_name" getter="get_name">
			The name of the node. This name is unique among the siblings (other child nodes from the same parent).
			When set to an existing name, the node will be automatically renamed
		</member>
		<member name="owner" type="Node" setter="set_owner" getter="get_owner">
			The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows for the creation of complex [SceneTree]s, with instancing and subinstancing.
		</member>
		<member name="pause_mode" type="int" setter="set_pause_mode" getter="get_pause_mode" enum="Node.PauseMode">
		</member>
	</members>
	<signals>
		<signal name="renamed">
			<description>
				Emitted when the node is renamed.
			</description>
		</signal>
		<signal name="tree_entered">
			<description>
				Emitted when the node enters the tree.
			</description>
		</signal>
		<signal name="tree_exited">
			<description>
				Emitted after the node exits the tree and is no longer active.
			</description>
		</signal>
		<signal name="tree_exiting">
			<description>
				Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_ENTER_TREE" value="10">
			Notification received when the node enters a [SceneTree].
		</constant>
		<constant name="NOTIFICATION_EXIT_TREE" value="11">
			Notification received when the node is about to exit a [SceneTree].
		</constant>
		<constant name="NOTIFICATION_MOVED_IN_PARENT" value="12">
			Notification received when the node is moved in the parent.
		</constant>
		<constant name="NOTIFICATION_READY" value="13">
			Notification received when the node is ready. See [method _ready].
		</constant>
		<constant name="NOTIFICATION_PAUSED" value="14">
			Notification received when the node is paused.
		</constant>
		<constant name="NOTIFICATION_UNPAUSED" value="15">
			Notification received when the node is unpaused.
		</constant>
		<constant name="NOTIFICATION_PHYSICS_PROCESS" value="16">
			Notification received every frame when the physics process flag is set (see [method set_physics_process]).
		</constant>
		<constant name="NOTIFICATION_PROCESS" value="17">
			Notification received every frame when the process flag is set (see [method set_process]).
		</constant>
		<constant name="NOTIFICATION_PARENTED" value="18">
			Notification received when a node is set as a child of another node. Note that this doesn't mean that a node entered the Scene Tree.
		</constant>
		<constant name="NOTIFICATION_UNPARENTED" value="19">
			Notification received when a node is unparented (parent removed it from the list of children).
		</constant>
		<constant name="NOTIFICATION_INSTANCED" value="20">
			Notification received when the node is instanced.
		</constant>
		<constant name="NOTIFICATION_DRAG_BEGIN" value="21">
			Notification received when a drag begins.
		</constant>
		<constant name="NOTIFICATION_DRAG_END" value="22">
			Notification received when a drag ends.
		</constant>
		<constant name="NOTIFICATION_PATH_CHANGED" value="23">
			Notification received when the node's [NodePath] changed.
		</constant>
		<constant name="NOTIFICATION_TRANSLATION_CHANGED" value="24">
		</constant>
		<constant name="NOTIFICATION_INTERNAL_PROCESS" value="25">
		</constant>
		<constant name="NOTIFICATION_INTERNAL_PHYSICS_PROCESS" value="26">
		</constant>
		<constant name="RPC_MODE_DISABLED" value="0" enum="RPCMode">
		</constant>
		<constant name="RPC_MODE_REMOTE" value="1" enum="RPCMode">
			Call a method remotely.
		</constant>
		<constant name="RPC_MODE_SYNC" value="2" enum="RPCMode">
			Call a method both remotely and locally.
		</constant>
		<constant name="RPC_MODE_MASTER" value="3" enum="RPCMode">
			Call a method if the Node is Master.
		</constant>
		<constant name="RPC_MODE_SLAVE" value="4" enum="RPCMode">
			Call a method if the Node is Slave.
		</constant>
		<constant name="PAUSE_MODE_INHERIT" value="0" enum="PauseMode">
			Inherits pause mode from parent. For root node, it is equivalent to PAUSE_MODE_STOP.
		</constant>
		<constant name="PAUSE_MODE_STOP" value="1" enum="PauseMode">
			Stop processing when SceneTree is paused.
		</constant>
		<constant name="PAUSE_MODE_PROCESS" value="2" enum="PauseMode">
			Continue to process regardless of SceneTree pause state.
		</constant>
		<constant name="DUPLICATE_SIGNALS" value="1" enum="DuplicateFlags">
			Duplicate the node's signals.
		</constant>
		<constant name="DUPLICATE_GROUPS" value="2" enum="DuplicateFlags">
			Duplicate the node's groups.
		</constant>
		<constant name="DUPLICATE_SCRIPTS" value="4" enum="DuplicateFlags">
			Duplicate the node's scripts.
		</constant>
		<constant name="DUPLICATE_USE_INSTANCING" value="8" enum="DuplicateFlags">
			Duplicate using instancing.
		</constant>
	</constants>
</class>
